{"date":"2024-06-05T17:48:46.189Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":460,"content":"#include \"main.hpp\"\n\nMain::Main(char *majorsCSV, char *studentsCSV, char *coursesCSV, char *professorsCSV)\n{\n    makeStudentList(studentsCSV);\n    makeProfessorList(professorsCSV);\n    makeCourseList(coursesCSV);\n    makeMajorList(majorsCSV);\n}\n\nvoid Main::makeStudentList(char *studentsCSV)\n{\n    CSVReader studentsFile(studentsCSV);\n    for (int i = 1; i <= numOfLines(studentsCSV); i++)\n    {\n        Student *newStudent = new Student(studentsFile.getObject(i, 1), studentsFile.getObject(i, 2), studentsFile.getObject(i, 3),\n                                          studentsFile.getObject(i, 4), studentsFile.getObject(i, 5));\n        studentsList.push_back(newStudent);\n    }\n}\n\nvoid Main::makeProfessorList(char *professorsCSV)\n{\n    CSVReader professorsFile(professorsCSV);\n    for (int i = 1; i <= numOfLines(professorsCSV); i++)\n    {\n        Professor *newProfessor = new Professor(professorsFile.getObject(i, 1), professorsFile.getObject(i, 2), professorsFile.getObject(i, 3),\n                                                professorsFile.getObject(i, 4), professorsFile.getObject(i, 5));\n        professorList.push_back(newProfessor);\n    }\n}\n\nvoid Main::makeCourseList(char *coursesCSV)\n{\n    CSVReader coursesFile(coursesCSV);\n    for (int i = 1; i <= numOfLines(coursesCSV); i++)\n    {\n        Course *newCourse = new Course(coursesFile.getObject(i, 1), coursesFile.getObject(i, 2), coursesFile.getObject(i, 3),\n                                       coursesFile.getObject(i, 4), coursesFile.getObject(i, 5));\n        courseList.push_back(newCourse);\n    }\n}\n\nvoid Main::makeMajorList(char *majorsCSV)\n{\n    CSVReader majorsFile(majorsCSV);\n    for (int i = 1; i <= numOfLines(majorsCSV); i++)\n    {\n        Major *newMajor = new Major(majorsFile.getObject(i, 1), majorsFile.getObject(i, 2));\n        majorList.push_back(newMajor);\n    }\n}\n\nbool Main::CheckSuperCommand(string superCommand)\n{\n    // int counter = 0;\n    // for (int i = 0 ; i < superCommandList.size() ; i++)\n    // {\n    //     if (superCommand != superCommandList[i])\n    //     {\n    //         counter ++;\n    //     }\n    // }\n    // if (counter == superCommandList.size())\n    // {\n    //     throw ErrorHandler(3);\n    // }\n    for (int i = 0 ; i < superCommandList.size() ; i++)\n    {\n        if (superCommand == superCommandList[i])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool CheckSeprator(string seprator)\n{\n    // if (seprator != '?')\n    // {\n    //     throw ErrorHandler(3);\n    // }\n    if (seprator == SEPRATOR)\n    {\n        return true;\n    }\n    return false;\n}\n\nvoid Main::GetInput()\n{\n    string superCommand, subCommand, commandArguments;\n    string seprator;\n    cin >> superCommand;\n    if (!CheckSuperCommand(superCommand))\n    {\n        throw ErrorHandler(3);\n    }\n    cin >> subCommand;\n    cin >> seprator;\n    CheckSeprator(seprator);\n    getline(cin, commandArguments);\n    //cout << superCommand << endl << subCommand << endl << seprator << endl << commandArguments << endl;\n    // try\n    // {\n    //     CheckSuperCommand(superCommand);\n    //     CheckSeprator(seprator);\n    //     Post postCommnd(subCommand , commandArguments);\n    // }\n    // catch (ErrorHandler &error)\n    // {\n    //     error.GetErrorMassage();\n    // }\n}\n\nvoid Main::runProgram()\n{\n    // while (true)\n    // {\n         GetInput();\n    // }\n    // string superCommand;\n    // while (cin >> superCommand)\n    // {\n    //     if (superCommand == \"POST\")\n    //     {\n    //         Post post;\n    //         post.RunCommand();\n    //         // string commandType , separator;\n    //         // cin >> commandType >> separator;\n    //         // //cout << \"POST COMMAND\" << endl;\n    //         // cout << commandType << \"-\" << separator << endl;\n    //     }\n    //     else if(superCommand == \"GET\")\n    //     {\n    //         cout << \"GET COMMAND\" << endl;\n    //     }\n    //     else if(superCommand == \"PUT\")\n    //     {\n    //         cout << \"PUT COMMAND\" << endl;\n    //     }\n    //     else if (superCommand == \"DELETE\")\n    //     {\n    //         cout << \"DELETE COMMAND\"<< endl;\n    //     }\n    //     else\n    //     {\n    //         cerr << \"Bad Request\" << endl;\n    //     }\n    // }\n}","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/main.cpp","identifier":"Text Change","lineCount":152,"languageId":"cpp"},"failed":false}