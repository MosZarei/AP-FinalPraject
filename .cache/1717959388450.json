{"date":"2024-06-09T18:56:27.305Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":1324,"content":"#include \"student.hpp\"\n\nStudent::Student(string studentID, string studentName, string studentMajor, string studentSemester, string studentPass)\n    : Users(studentName, studentPass, studentMajor , studentID)\n{\n    if (studentSemester == \"\")\n    {\n        // handling exception\n    }\n    sSemester = studentSemester;\n    sMajor = studentMajor;\n}\n\nbool Student::CanTakeCourse(string coursePre , vector <string> courseMajor , string time , string examDate)\n{\n    for (int i = 0 ; i < courseMajor.size() ; i++)\n    {\n        if(sMajor == courseMajor[i])\n        {\n            cout << \"1\" << endl;\n        }\n        if (stoi(sSemester) >= stoi(coursePre))\n        {\n            cout << \"2\" << endl;\n        }\n        if(MatchClassAndExamTime(time , examDate))\n        {\n            cout << \"3\" << endl;\n        }\n        if(sMajor == courseMajor[i] && stoi(sSemester) >= stoi(coursePre) && MatchClassAndExamTime(time , examDate))\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid Student::AddCourse(vector<string> courseLine)\n{\n    stdCourses.push_back(courseLine);\n}\n\nbool Student::MatchClassAndExamTime(string time , string examDate)\n{\n    for(int i = 0 ; i < stdCourses.size() ; i++)\n    {\n        if ((stdCourses[i][4] != examDate) && MatchClassTime(time))\n        {\n            cout << \"hehe kos\" << endl;\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Student::MatchClassTime(string time)\n{\n    vector<string> courseTime;\n    stringstream stream(time);\n    string temp;\n    getline(stream, temp, ':');\n    courseTime.push_back(temp);\n    getline(stream, temp, ':');\n    stringstream stream2(temp);\n    while (getline(stream2, temp, '-'))\n    {\n        courseTime.push_back(temp);\n    }\n    for (int i = 0; i < stdCourseTime.size(); i++)\n    {\n        if (stdCourseTime[i][0] == courseTime[0] &&\n                ((stoi(courseTime[1]) >= stoi(stdCourseTime[i][1])) && (stoi(courseTime[1]) < stoi(stdCourseTime[i][2]))) ||\n            ((stoi(courseTime[2]) > stoi(stdCourseTime[i][1])) && (stoi(courseTime[2]) <= stoi(stdCourseTime[i][2]))))\n        {\n            return false;\n        }\n    }\n    stdCourseTime.push_back(courseTime);\n    return true;\n}\n\nvoid Student::DeleteCourse(string courseID)\n{\n    vector<string> temp;\n    int courseCounter = 0;\n    bool isCourse = false;\n    for (courseCounter ; courseCounter < stdCourses.size() ; courseCounter++)\n    {\n        if(courseID == stdCourses[courseCounter][0])\n        {\n            isCourse = true;\n            break;\n        }\n    }\n    if(!isCourse)\n    {\n        throw ErrorHandler(2);\n    }\n    temp = stdCourses[courseCounter];\n    for (int i = courseCounter + 1 ; i < stdCourses.size() ; i++)\n    {\n        stdCourses[i-1] = stdCourses[i];\n    }\n    stdCourses[stdCourses.size() - 1] = temp;\n    stdCourses.pop_back();\n}\n\nvoid Student::PrintCourses()\n{\n    if(stdCourses.size() == 0)\n    {\n        throw ErrorHandler(1);\n    }\n    for(int i = 0 ; i < stdCourses.size() ; i++)\n    {\n        cout << stdCourses[i][0] << \" \"\n             << stdCourses[i][6] << \" \"\n             << stdCourses[i][2] << \" \"\n             << stdCourses[i][1] << \" \"\n             << stdCourses[i][3] << \" \"\n             << stdCourses[i][4] << \" \"\n             << stdCourses[i][5] << endl;\n    }\n}","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/student.cpp","identifier":"Text Change","lineCount":124,"languageId":"cpp"},"failed":false}