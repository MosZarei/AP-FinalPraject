{"date":"2024-06-12T17:11:50.129Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":83,"content":"#include \"superCommand.hpp\"\n#include <algorithm>\n\nGetCommand::GetCommand(vector<Major *> inputMajorVector, vector<Student *> inputStudentVector,\n                       vector<Course *> inputCourseVector, vector<Professor *> inputProfessorVector,\n                       Users *inputDefaultUser, string inputSubCommand, string inputArguments, string inputUserWhoLogged, vector<vector<string>> inputCourseOfferList)\n    : SuperCommand(inputMajorVector, inputStudentVector, inputCourseVector, inputProfessorVector, inputDefaultUser)\n{\n    if (!CheckSubCommand(inputSubCommand))\n    {\n        throw ErrorHandler(2);\n    }\n    subCommand = inputSubCommand;\n    stringstream argstream(inputArguments);\n    string temp;\n    while (getline(argstream, temp, ' '))\n    {\n        arguments.push_back(temp);\n    }\n    userWhoLogged = inputUserWhoLogged;\n    tempCourseOfferList = inputCourseOfferList;\n    tempDefaultUser = inputDefaultUser;\n}\n\nbool GetCommand::CheckSubCommand(string inputSubCommand)\n{\n    for (int i = 0; i < getSubCommandsList.size(); i++)\n    {\n        if (inputSubCommand == getSubCommandsList[i])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid GetCommand::RunCommand()\n{\n    if (subCommand == \"courses\")\n    {\n        GetCourses(arguments);\n    }\n    else if (subCommand == \"personal_page\")\n    {\n        GetPersonalPage(arguments);\n    }\n    else if (subCommand == \"post\")\n    {\n        GetPost(arguments);\n    }\n    else if (subCommand == \"notification\")\n    {\n        GetNotifications(arguments);\n    }\n    else if (subCommand == \"my_courses\")\n    {\n        GetMyCourses(arguments);\n    }\n}\n\nvoid GetCommand::GetNotifications(vector<string> inputArgs)\n{\n    if (inputArgs.size() != 0)\n    {\n        throw ErrorHandler(3);\n    }\n    ShowNotificaion(userWhoLogged);\n}\n\nbool SortCourseList(vector<string> a, vector<string> b) { return a[0] < b[0]; }\n\nvoid GetCommand::GetCourses(vector<string> inputArgs)\n{\n    bool isCourse = false;\n    int courseListLine = 0;\n    if (inputArgs.size() == 1 || inputArgs.size() > 2)\n    {\n        throw ErrorHandler(3);\n    }\n    if (inputArgs.size() == 0)\n    {\n        if (tempCourseOfferList.size() != 0)\n        {\n            if (tempCourseOfferList.size() >= 1)\n            {\n                sort(tempCourseOfferList.begin(), tempCourseOfferList.end(), SortCourseList);\n            }\n            for (int i = 0; i < tempCourseOfferList.size(); i++)\n            {\n                cout << tempCourseOfferList[i][0] << \" \"\n                     << FindCourse(tempCourseOfferList[i][0])->getName() << \" \"\n                     << tempCourseOfferList[i][2] << \" \"\n                     << tempCourseOfferList[i][1] << endl;\n            }\n        }\n        else\n        {\n            throw ErrorHandler(1);\n        }\n    }\n    else if (inputArgs.size() == 2)\n    {\n        if (stoi(inputArgs[1]) < 1)\n        {\n            throw ErrorHandler(3);\n        }\n        for (courseListLine; courseListLine < tempCourseOfferList.size(); courseListLine++)\n        {\n            if (tempCourseOfferList[courseListLine][0] == inputArgs[1])\n            {\n                isCourse = true;\n                break;\n            }\n        }\n        if (!isCourse)\n        {\n            throw ErrorHandler(2);\n        }\n        cout << tempCourseOfferList[courseListLine][0] << \" \"\n             << FindCourse(tempCourseOfferList[courseListLine][0])->getName() << \" \"\n             << tempCourseOfferList[courseListLine][2] << \" \"\n             << tempCourseOfferList[courseListLine][1] << \" \"\n             << tempCourseOfferList[courseListLine][3] << \" \"\n             << tempCourseOfferList[courseListLine][4] << \" \"\n             << tempCourseOfferList[courseListLine][5] << \" \" << endl;\n    }\n}\n\nvoid GetCommand::GetMyCourses(vector<string> inputArgs)\n{\n    if (inputArgs.size() != 0)\n    {\n        throw ErrorHandler(3);\n    }\n    GetStudentCourses(userWhoLogged);\n}\n\nvoid GetCommand::GetPersonalPage(vector<string> inputArgs)\n{\n    if (inputArgs.size() != 2)\n    {\n        throw ErrorHandler(3);\n    }\n    if (stoi(inputArgs[1]) < 0)\n    {\n        throw ErrorHandler(3);\n    }\n    if (IsStudent(inputArgs[1]))\n    {\n        cout << FindStudent(inputArgs[1])->getName() << \" \" << FindMajor(FindStudent(inputArgs[1])->getMajor())->getMajorName() << \" \"\n             << FindStudent(inputArgs[1])->getSemester() << \" \";\n        for (int i = 0; i < FindStudent(inputArgs[1])->getStudentCourses().size(); i++)\n        {\n            cout << FindStudent(inputArgs[1])->getCourseName(i);\n            if (i != FindStudent(inputArgs[1])->getStudentCourses().size() - 1)\n            {\n                cout << \",\";\n            }\n        }\n        cout << endl;\n        for (int i = FindStudent(inputArgs[1])->getPostsNumber() - 1; i >= 0; i--)\n        {\n            FindStudent(inputArgs[1])->PrintPosts(i);\n        }\n    }\n    else if (IsProfessor(inputArgs[1]))\n    {\n        cout << FindProfessor(inputArgs[1])->getName() << \" \" << FindMajor(FindProfessor(inputArgs[1])->getMajor())->getMajorName() << \" \"\n             << FindProfessor(inputArgs[1])->getPosition() << \" \";\n        for (int i = 0 ; i < FindProfessor(inputArgs[1])->getProfessorCourses().size() ; i++)\n        {\n            cout << FindProfessor(inputArgs[1])->getCourseName(i);\n            if(i != FindProfessor(inputArgs[1])->getProfessorCourses().size() - 1)\n            {\n                cout << \",\";\n            }\n        }\n    }\n    else if (inputArgs[1] == \"0\")\n    {\n        cout << \"UT_account\" << endl;\n        for (int i = tempDefaultUser->getPostsNumber() - 1; i >= 0; i--)\n        {\n            tempDefaultUser->PrintPosts(i);\n        }\n    }\n    else\n    {\n        throw ErrorHandler(2);\n    }\n}\n\nvoid GetCommand::GetPost(vector<string> inputArgs)\n{\n    if (inputArgs.size() != 4)\n    {\n        throw ErrorHandler(3);\n    }\n    string userID;\n    string postID;\n    if (inputArgs[0] == \"id\")\n    {\n        userID = inputArgs[1];\n        postID = inputArgs[3];\n    }\n    else\n    {\n        postID = inputArgs[1];\n        userID = inputArgs[3];\n    }\n    if (stoi(userID) < 0 || stoi(postID) < 1)\n    {\n        throw ErrorHandler(3);\n    }\n    if (IsStudent(userID))\n    {\n        if (!FindStudent(userID)->CheckPostExistence(postID))\n        {\n            throw ErrorHandler(2);\n        }\n        cout << FindStudent(userID)->getName() << \" \" << FindMajor(FindStudent(userID)->getMajor())->getMajor() << \" \"\n             << FindStudent(userID)->getSemester() << \" \";\n        for (int i = 0; i < FindStudent(userID)->getStudentCourses().size(); i++)\n        {\n            cout << FindStudent(userID)->getCourseName(i);\n            if (i != FindStudent(userID)->getStudentCourses().size() - 1)\n            {\n                cout << \",\";\n            }\n        }\n        cout << endl;\n        for (int i = FindStudent(userID)->getPostsNumber() - 1; i >= 0; i--)\n        {\n            FindStudent(userID)->PrintPostDetail(i);\n        }\n    }\n    else if (IsProfessor(userID))\n    {\n    }\n    else if (userID == \"0\")\n    {\n        cout << \"UT_account\" << endl;\n        for (int i = tempDefaultUser->getPostsNumber() - 1; i >= 0; i--)\n        {\n            tempDefaultUser->PrintPostDetail(i);\n        }\n    }\n    else\n    {\n        throw ErrorHandler(2);\n    }\n}","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/getCommand.cpp","identifier":"Text Change","lineCount":252,"languageId":"cpp"},"failed":false}