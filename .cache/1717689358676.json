{"date":"2024-06-06T15:55:57.470Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":974,"content":"#include \"main.hpp\"\n\nMain::Main(char *majorsCSV, char *studentsCSV, char *coursesCSV, char *professorsCSV)\n{\n    makeStudentList(studentsCSV);\n    makeProfessorList(professorsCSV);\n    makeCourseList(coursesCSV);\n    makeMajorList(majorsCSV);\n}\n\nvoid Main::makeStudentList(char *studentsCSV)\n{\n    CSVReader studentsFile(studentsCSV);\n    for (int i = 1; i <= numOfLines(studentsCSV); i++)\n    {\n        Student *newStudent = new Student(studentsFile.getObject(i, 1), studentsFile.getObject(i, 2), studentsFile.getObject(i, 3),\n                                          studentsFile.getObject(i, 4), studentsFile.getObject(i, 5));\n        studentsList.push_back(newStudent);\n    }\n}\n\nvoid Main::makeProfessorList(char *professorsCSV)\n{\n    CSVReader professorsFile(professorsCSV);\n    for (int i = 1; i <= numOfLines(professorsCSV); i++)\n    {\n        Professor *newProfessor = new Professor(professorsFile.getObject(i, 1), professorsFile.getObject(i, 2), professorsFile.getObject(i, 3),\n                                                professorsFile.getObject(i, 4), professorsFile.getObject(i, 5));\n        professorList.push_back(newProfessor);\n    }\n}\n\nvoid Main::makeCourseList(char *coursesCSV)\n{\n    CSVReader coursesFile(coursesCSV);\n    for (int i = 1; i <= numOfLines(coursesCSV); i++)\n    {\n        Course *newCourse = new Course(coursesFile.getObject(i, 1), coursesFile.getObject(i, 2), coursesFile.getObject(i, 3),\n                                       coursesFile.getObject(i, 4), coursesFile.getObject(i, 5));\n        courseList.push_back(newCourse);\n    }\n}\n\nvoid Main::makeMajorList(char *majorsCSV)\n{\n    CSVReader majorsFile(majorsCSV);\n    for (int i = 1; i <= numOfLines(majorsCSV); i++)\n    {\n        Major *newMajor = new Major(majorsFile.getObject(i, 1), majorsFile.getObject(i, 2));\n        majorList.push_back(newMajor);\n    }\n}\n\nbool Main::CheckSuperCommand(string superCommand)\n{\n    for (int i = 0; i < superCommandList.size(); i++)\n    {\n        if (superCommand == superCommandList[i])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool CheckSeprator(string seprator)\n{\n    if (seprator == SEPRATOR)\n    {\n        return true;\n    }\n    return false;\n}\n\nvoid Main::GetInput()\n{\n    vector<string> inputs;\n    string input, line;\n    getline(cin, line);\n    stringstream lineStream(line);\n    while (getline(lineStream, input, ' '))\n    {\n        inputs.push_back(input);\n    }\n    if (!CheckSuperCommand(inputs[0]) || !CheckSeprator(inputs[2]))\n    {\n        throw ErrorHandler(3);\n    }\n    else\n    {\n        for (int i = 0; i < inputs.size(); i++)\n        {\n            switch (i)\n            {\n            case 0:\n                superCommand = inputs[i];\n                break;\n            case 1:\n                subCommand = inputs[i];\n                break;\n            case 2:\n                seprator = inputs[i];\n                break;\n            }\n        }\n        if (inputs.size() > 3)\n        {\n            arguments = (inputs[3] + \" \");\n            for (int i = 4; i < inputs.size(); i++)\n            {\n                arguments += (inputs[i] + \" \");\n            }\n        }\n    }\n    if (IsUserLoggedIn())\n    {\n        cout << \"login true\" << endl;\n    }\n}\n\n// void Main::SelectSubCommand()\n// {\n//     cout << studentsList.size() << endl;\n//     cout << professorList.size() << endl;\n//     if (superCommand == \"POST\")\n//     {\n//         PostCommand command(subCommand, arguments);\n//         command.RunCommand();\n//     }\n//     else if (superCommand == \"GET\")\n//     {\n//         // GetCommand command(subCommand , argumenrs);\n//     }\n//     else if (superCommand == \"PUT\")\n//     {\n//         // PutCommand command(subCommand , argumenrs);\n//     }\n//     else if (superCommand == \"DELETE\")\n//     {\n//         // DeleteCommand command(subCommand , argumenrs);\n//     }\n// }\n\nbool Main ::IsUser(string userID)\n{\n    for (int i = 0; i < studentsList.size(); i++)\n    {\n        if (userID == studentsList[i]->getID())\n        {\n            return true;\n        }\n    }\n    for (int i = 0; i < professorList.size(); i++)\n    {\n        if (userID == professorList[i]->getID())\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool Main::IsUserPasswordMatch(string userID, string userPass)\n{\n    int counter = 0;\n    for (counter; counter < studentsList.size(); counter++)\n    {\n        if (userID == studentsList[counter]->getID())\n        {\n            break;\n        }\n    }\n    if (studentsList[counter]->MatchPassword(userPass))\n    {\n        return true;\n    }\n    return false;\n}\n\n// bool Main::IsUserLoggedIn()\n//{\n//  int counter = 0;\n//  for (counter; counter < studentsList.size(); counter++)\n//  {\n//      if (userID == studentsList[counter]->getID())\n//      {\n//          break;\n//      }\n//  }\n//  if (studentsList[counter]->LoggedIn())\n//  {\n//      return true;\n//  }\n//  return false;\n//}\n\nvoid Main::MakeUserLoggedIn()\n{\n    // int studentCounter = 0;\n    // int proCounter = 0;\n    // bool isStudent;\n    // bool isProfessor;\n    // for (studentCounter; studentCounter < studentsList.size(); studentCounter++)\n    // {\n    //     if (userID == studentsList[studentCounter]->getID())\n    //     {\n    //         isStudent = true;\n    //         break;\n    //     }\n    // }\n    // for (proCounter; proCounter < professorList.size(); proCounter++)\n    // {\n    //     if (userID == professorList[proCounter]->getID())\n    //     {\n    //         isProfessor = true;\n    //         break;\n    //     }\n    // }\n    // if (isStudent)\n    // {\n    //     studentsList[studentCounter]->MakeLoggedIn();\n    // }\n    // if (isProfessor)\n    // {\n    //     professorList[proCounter]->MakeLoggedIn();\n    // }\n    isUserLoggedIn = true;\n    cout << \"OK\" << endl;\n}\n\n// void Main::runProgram()\n// {\n//     while (true)\n//     {\n//         try\n//         {\n//             GetInput();\n//             SelectSubCommand();\n//             // cout << superCommand << \" - \" << subCommand << \" - \" << seprator << \" - \" << arguments << endl;\n//         }\n//         catch (ErrorHandler &error)\n//         {\n//             error.GetErrorMassage();\n//         }\n//     }\n// }","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/main.cpp","identifier":"Text Change","lineCount":246,"languageId":"cpp"},"failed":false}