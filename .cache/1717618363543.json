{"date":"2024-06-05T20:12:41.173Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":2736,"content":"#include \"main.hpp\"\n\nMain::Main(char *majorsCSV, char *studentsCSV, char *coursesCSV, char *professorsCSV)\n{\n    makeStudentList(studentsCSV);\n    makeProfessorList(professorsCSV);\n    makeCourseList(coursesCSV);\n    makeMajorList(majorsCSV);\n}\n\nvoid Main::makeStudentList(char *studentsCSV)\n{\n    CSVReader studentsFile(studentsCSV);\n    for (int i = 1; i <= numOfLines(studentsCSV); i++)\n    {\n        Student *newStudent = new Student(studentsFile.getObject(i, 1), studentsFile.getObject(i, 2), studentsFile.getObject(i, 3),\n                                          studentsFile.getObject(i, 4), studentsFile.getObject(i, 5));\n        studentsList.push_back(newStudent);\n    }\n}\n\nvoid Main::makeProfessorList(char *professorsCSV)\n{\n    CSVReader professorsFile(professorsCSV);\n    for (int i = 1; i <= numOfLines(professorsCSV); i++)\n    {\n        Professor *newProfessor = new Professor(professorsFile.getObject(i, 1), professorsFile.getObject(i, 2), professorsFile.getObject(i, 3),\n                                                professorsFile.getObject(i, 4), professorsFile.getObject(i, 5));\n        professorList.push_back(newProfessor);\n    }\n}\n\nvoid Main::makeCourseList(char *coursesCSV)\n{\n    CSVReader coursesFile(coursesCSV);\n    for (int i = 1; i <= numOfLines(coursesCSV); i++)\n    {\n        Course *newCourse = new Course(coursesFile.getObject(i, 1), coursesFile.getObject(i, 2), coursesFile.getObject(i, 3),\n                                       coursesFile.getObject(i, 4), coursesFile.getObject(i, 5));\n        courseList.push_back(newCourse);\n    }\n}\n\nvoid Main::makeMajorList(char *majorsCSV)\n{\n    CSVReader majorsFile(majorsCSV);\n    for (int i = 1; i <= numOfLines(majorsCSV); i++)\n    {\n        Major *newMajor = new Major(majorsFile.getObject(i, 1), majorsFile.getObject(i, 2));\n        majorList.push_back(newMajor);\n    }\n}\n\nbool Main::CheckSuperCommand(string superCommand)\n{\n    for (int i = 0; i < superCommandList.size(); i++)\n    {\n        if (superCommand == superCommandList[i])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool CheckSeprator(string seprator)\n{\n    if (seprator == SEPRATOR)\n    {\n        return true;\n    }\n    return false;\n}\n\nvoid Main::GetInput()\n{\n    vector<string> inputs;\n    string input, line;\n    getline(cin, line);\n    stringstream lineStream(line);\n    while (getline(lineStream, input, ' '))\n    {\n        inputs.push_back(input);\n    }\n    if (!CheckSuperCommand(inputs[0]) || !CheckSeprator(inputs[2]))\n    {\n        throw ErrorHandler(3);\n    }\n    else\n    {\n        for (int i = 0; i < inputs.size(); i++)\n        {\n            switch (i)\n            {\n            case 0:\n                superCommand = inputs[i];\n                break;\n            case 1:\n                subCommand = inputs[i];\n                break;\n            case 2:\n                seprator = inputs[i];\n                break;\n            }\n        }\n        if (inputs.size() > 3)\n        {\n            arguments = (inputs[3] + \" \");\n            for (int i = 4; i < inputs.size(); i++)\n            {\n                arguments += (inputs[i] + \" \");\n            }\n        }\n    }\n}\n\nvoid Main::SelectSubCommand()\n{\n    if (superCommand == \"POST\")\n    {\n        //PostCommand command(subCommand , argumenrs);\n    }\n    else if (superCommand == \"GET\")\n    {\n        //GetCommand command(subCommand , argumenrs);\n    }\n    else if (superCommand == \"PUT\")\n    {\n        //PutCommand command(subCommand , argumenrs);\n    }\n    else if (superCommand == \"DELETE\")\n    {\n        //DeleteCommand command(subCommand , argumenrs);\n    }\n}\n\nvoid Main::runProgram()\n{\n    while (true)\n    {\n        try\n        {\n            GetInput();\n            //cout << superCommand << \" - \" << subCommand << \" - \" << seprator << \" - \" << arguments << endl;\n        }\n        catch (ErrorHandler &error)\n        {\n            error.GetErrorMassage();\n        }\n    }\n}","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/main.cpp","identifier":"Text Change","lineCount":151,"languageId":"cpp"},"failed":false}