{"date":"2024-06-09T11:45:02.086Z","courseId":"17","assignment":"AP-Spring03-CA6","trace":{"version":363,"content":"#include \"superCommand.hpp\"\n\nSuperCommand::SuperCommand(vector<Major *> inputMajorVector, vector<Student *> inputStudentVector, vector<Course *> inputCourseVector,\n                           vector<Professor *> inputProfessorVector, Users *inputDefalutUser)\n{\n    tempMajorList = inputMajorVector;\n    tempStudentsList = inputStudentVector;\n    tempCourseList = inputCourseVector;\n    tempProfessorList = inputProfessorVector;\n    tempDefaultUser = inputDefalutUser;\n}\n\nvoid SuperCommand::Update(vector<Major *> &inputMajorVector, vector<Student *> &inputStudentVector, vector<Course *> &inputCourseVector,\n                          vector<Professor *> &inputProfessorVector, Users *&inputDefalutUser)\n{\n    inputMajorVector = tempMajorList;\n    inputStudentVector = tempStudentsList;\n    inputCourseVector = tempCourseList;\n    inputProfessorVector = tempProfessorList;\n    inputDefalutUser = tempDefaultUser;\n}\n\nbool SuperCommand::CheckSuperCommand(string superCommand)\n{\n    for (int i = 0; i < superCommandList.size(); i++)\n    {\n        if (superCommand == superCommandList[i])\n        {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool CheckSeprator(string seprator)\n{\n    if (seprator == SEPRATOR)\n    {\n        return true;\n    }\n    return false;\n}\n\nvoid SuperCommand::GetInput()\n{\n    vector<string> inputs;\n    string input, line;\n    getline(cin, line);\n    stringstream lineStream(line);\n    while (getline(lineStream, input, ' '))\n    {\n        inputs.push_back(input);\n    }\n    if (!CheckSuperCommand(inputs[0]) || !CheckSeprator(inputs[2]))\n    {\n        throw ErrorHandler(3);\n    }\n    else\n    {\n        for (int i = 0; i < inputs.size(); i++)\n        {\n            switch (i)\n            {\n            case 0:\n                superCommand = inputs[i];\n                break;\n            case 1:\n                subCommand = inputs[i];\n                break;\n            case 2:\n                seprator = inputs[i];\n                break;\n            }\n        }\n        if (inputs.size() > 3)\n        {\n            arguments = (inputs[3] + \" \");\n            for (int i = 4; i < inputs.size(); i++)\n            {\n                arguments += (inputs[i] + \" \");\n            }\n        }\n    }\n}\n\nvoid SuperCommand::CheckLoginCondditions(string userID, string userPass)\n{\n    int stdCounter = 0;\n    int proCounter = 0;\n    bool isStd = false;\n    bool isPro = false;\n    bool isDefaultUser = false;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (userID == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (userID == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (userID == tempDefaultUser->getID())\n    {\n        isDefaultUser = true;\n    }\n    if (isStd || isPro || isDefaultUser)\n    {\n        if (isStd && !tempStudentsList[stdCounter]->MatchPassword(userPass))\n        {\n            throw ErrorHandler(4);\n        }\n        if (isPro && !tempProfessorList[proCounter]->MatchPassword(userPass))\n        {\n            throw ErrorHandler(4);\n        }\n        if (isDefaultUser && !tempDefaultUser->MatchPassword(userPass))\n        {\n            throw ErrorHandler(4);\n        }\n    }\n    else\n    {\n        throw ErrorHandler(2);\n    }\n}\n\nvoid SuperCommand::ConnectUsers(string mainUserID, string targetUserId)\n{\n    bool isPro = false;\n    bool isStd = false;\n    int stdCounter = 0;\n    int proCounter = 0;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (targetUserId == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (targetUserId == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (isPro || isStd)\n    {\n        if (isPro)\n        {\n            tempProfessorList[proCounter]->Connect(mainUserID);\n        }\n        else if (isStd)\n        {\n            tempStudentsList[stdCounter]->Connect(mainUserID);\n        }\n    }\n    else\n    {\n        throw ErrorHandler(2);\n    }\n}\n\nvoid SuperCommand::AddPostToUserPage(string userID, string title, string massage)\n{\n    bool isPro = false;\n    bool isStd = false;\n    int stdCounter = 0;\n    int proCounter = 0;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (userID == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (userID == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (isStd)\n    {\n        tempStudentsList[stdCounter]->AddPost(title, massage);\n        SendNotification(userID, tempStudentsList[stdCounter]->getConnectUsers(), \"New Post\");\n        // tempStudentsList[stdCounter]->PtintPosts();\n    }\n    else if (isPro)\n    {\n        tempProfessorList[proCounter]->AddPost(title, massage);\n        SendNotification(userID, tempProfessorList[proCounter]->getConnectUsers(), \"New Post\");\n        // tempProfessorList[proCounter]->PtintPosts();\n    }\n}\n\nvoid SuperCommand::DeletePostOfUserPage(string userID, string postNum)\n{\n    bool isPro = false;\n    bool isStd = false;\n    int stdCounter = 0;\n    int proCounter = 0;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (userID == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (userID == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (isStd)\n    {\n        tempStudentsList[stdCounter]->DeletePost(postNum);\n    }\n    else if (isPro)\n    {\n        tempProfessorList[proCounter]->DeletePost(postNum);\n    }\n    else\n    {\n        throw ErrorHandler(2);\n    }\n}\n\nvoid SuperCommand::SendNotification(string userID, vector<string> connectedUsers, string notificationMassage)\n{\n    string userName;\n    bool isPro = false;\n    bool isStd = false;\n    int stdCounter = 0;\n    int proCounter = 0;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (userID == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (userID == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (isStd)\n    {\n        userName = tempStudentsList[stdCounter]->getName();\n    }\n    else if (isPro)\n    {\n        userName = tempProfessorList[proCounter]->getName();\n    }\n    for (int i = 0; i < connectedUsers.size(); i++)\n    {\n        isPro = false;\n        isStd = false;\n        stdCounter = 0;\n        proCounter = 0;\n        for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n        {\n            if (connectedUsers[i] == tempStudentsList[stdCounter]->getID())\n            {\n                isStd = true;\n                break;\n            }\n        }\n        for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n        {\n            if (connectedUsers[i] == tempProfessorList[proCounter]->getID())\n            {\n                isPro = true;\n                break;\n            }\n        }\n        if (isStd)\n        {\n            tempStudentsList[stdCounter]->AddNotification(userID, userName, notificationMassage);\n        }\n        else if (isPro)\n        {\n            tempProfessorList[proCounter]->AddNotification(userID, userName, notificationMassage);\n        }\n    }\n}\n\nvoid SuperCommand::ShowNotificaion(string userID)\n{\n    bool isPro = false;\n    bool isStd = false;\n    int stdCounter = 0;\n    int proCounter = 0;\n    for (stdCounter; stdCounter < tempStudentsList.size(); stdCounter++)\n    {\n        if (userID == tempStudentsList[stdCounter]->getID())\n        {\n            isStd = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (userID == tempProfessorList[proCounter]->getID())\n        {\n            isPro = true;\n            break;\n        }\n    }\n    if (isStd)\n    {\n        tempStudentsList[stdCounter]->PrintNotification();\n    }\n    else if (isPro)\n    {\n        tempProfessorList[proCounter]->PrintNotification();\n    }\n}\n\nvoid SuperCommand::CheckCourseAndProfessor(string courseID, string professorID, string time, vector<string> outputArgs)\n{\n    bool isCourse = false;\n    bool isPro = false;\n    int courseCounter = 0;\n    int proCounter = 0;\n    for (courseCounter; courseCounter < tempCourseList.size(); courseCounter++)\n    {\n        if (tempCourseList[courseCounter]->getID() == courseID)\n        {\n            isCourse = true;\n            break;\n        }\n    }\n    for (proCounter; proCounter < tempProfessorList.size(); proCounter++)\n    {\n        if (tempProfessorList[proCounter]->getID() == professorID)\n        {\n            isPro = true;\n            break;\n        }\n    }\n    for (int i = 0; i < tempStudentsList.size(); i++)\n    {\n        if (tempStudentsList[i]->getID() == professorID)\n        {\n            throw ErrorHandler(4);\n        }\n    }\n    if (!isCourse || !isPro)\n    {\n        throw ErrorHandler(2);\n    }\n    if (!tempProfessorList[proCounter]->CanGetCourse(tempCourseList[courseCounter]->getMajor()))\n    {\n        throw ErrorHandler(4);\n    }\n    if (!tempProfessorList[proCounter]->MatchTime(time))\n    {\n        throw ErrorHandler(4);\n    }\n}\n\n","filename":"/home/rayan/Desktop/clone/AP-FinalPraject/superCommand.cpp","identifier":"Text Change","lineCount":384,"languageId":"cpp"},"failed":false}